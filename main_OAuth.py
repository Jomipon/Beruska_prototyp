import os
from urllib.parse import urlencode
import streamlit as st
from dotenv import load_dotenv
from supabase import create_client, Client

# --- naƒçten√≠ .env ---
load_dotenv()
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_ANON_KEY = os.getenv("SUPABASE_ANON_KEY")
APP_BASE_URL = os.getenv("APP_BASE_URL", "https://jomipon-beruska-prototyp.streamlit.app")

# --- vytvo≈ôen√≠ klienta s ANON kl√≠ƒçem (d≈Øle≈æit√© pro RLS) ---
supabase: Client = create_client(SUPABASE_URL, SUPABASE_ANON_KEY)

st.set_page_config(page_title="Streamlit + Supabase + RLS", page_icon="üîê")
st.title("üîê Streamlit + Supabase Auth (Google) + RLS")

# --- helper: je u≈æivatel p≈ôihl√°≈°en√Ω? ---
def get_session():
    # V supabase-py v2 se session dr≈æ√≠ uvnit≈ô auth; m≈Ø≈æeme volat:
    try:
        sess = supabase.auth.get_session()
        return sess
    except Exception:
        return None

def ensure_session_state():
    if "sb_session" not in st.session_state:
        st.session_state["sb_session"] = get_session()

ensure_session_state()

# --- p≈ôihl√°≈°en√≠ p≈ôes Google ---
def login_with_google():
    # Vytvo≈ô√≠me OAuth URL. Supabase vrac√≠ objekt s vlastnost√≠ .url
    res = supabase.auth.sign_in_with_oauth({
        "provider": "google",
        "options": {
            "redirect_to": APP_BASE_URL
        }
    })
    auth_url = getattr(res, "url", None) or res.get("url")
    if not auth_url:
        st.error("Nepoda≈ôilo se z√≠skat OAuth URL.")
        return
    st.session_state["auth_url"] = auth_url
    st.write("Pokud nedo≈°lo k p≈ôesmƒõrov√°n√≠, klikni na odkaz:")
    st.link_button("Pokraƒçovat na Google", auth_url)

# --- zpracov√°n√≠ n√°vratu z OAuth: ?code=... ---
def handle_oauth_callback():
    # Streamlit 1.33+: st.query_params je dict[str, list[str]] nebo dict-like
    qp = st.query_params
    code = None
    if isinstance(qp, dict):
        val = qp.get("code")
        if isinstance(val, list):
            code = val[0] if val else None
        elif isinstance(val, str):
            code = val
    if not code:
        return

    try:
        session = supabase.auth.exchange_code_for_session({"auth_code": code})
        # Ulo≈æ√≠me session do session_state
        st.session_state["sb_session"] = session
        st.success(f"P≈ôihl√°≈°en: {session.user.email}")
        # vyƒçistit query parametry (abychom neexchangovali znovu p≈ôi refreshi)
        st.query_params.clear()
    except Exception as e:
        st.error(f"Chyba p≈ôi v√Ωmƒõnƒõ k√≥du za session: {e}")

# --- odhl√°≈°en√≠ ---
def logout():
    try:
        supabase.auth.sign_out()
    finally:
        st.session_state.pop("sb_session", None)
        st.rerun()

# --- UI sekce: p≈ôihl√°≈°en√≠/odhl√°≈°en√≠ ---
handle_oauth_callback()
session = st.session_state.get("sb_session")

auth_col1, auth_col2 = st.columns(2)
with auth_col1:
    if not session or not getattr(session, "user", None):
        st.caption("Nejsi p≈ôihl√°≈°en.")
        if st.button("P≈ôihl√°sit se p≈ôes Google"):
            login_with_google()
    else:
        st.success(f"P≈ôihl√°≈°en jako: {session.user.email}")
with auth_col2:
    if session and getattr(session, "user", None):
        st.button("Odhl√°sit", on_click=logout)

st.divider()

# --- Datab√°zov√° ƒç√°st chr√°nƒõn√° RLS ---
st.subheader("üì¶ Moje polo≈æky (chr√°nƒõn√© RLS)")

if not session or not getattr(session, "user", None):
    st.info("P≈ôihlas se, aby ses dostal k vlastn√≠m dat≈Øm.")
    st.stop()

# Vlo≈æen√≠ nov√© polo≈æky
with st.form("add_item", clear_on_submit=True):
    content = st.text_input("Nov√Ω obsah")
    submitted = st.form_submit_button("P≈ôidat")
    if submitted and content.strip():
        ins = supabase.from_("items").insert({"content": content.strip()}).execute()
        if ins.error:
            st.error(f"Insert error: {ins.error}")
        else:
            st.success("P≈ôid√°no.")
            st.rerun()

# V√Ωpis jen m√Ωch ≈ô√°dk≈Ø (RLS)
res = supabase.from_("items").select("*").order("created_at", desc=True).execute()
if res.error:
    st.error(f"Select error: {res.error}")
else:
    rows = res.data or []
    if not rows:
        st.write("Zat√≠m ≈æ√°dn√© z√°znamy.")
    else:
        for r in rows:
            st.markdown(f"- **{r.get('content')}**  \n  _{r.get('created_at')}_")

# Volitelnƒõ: jednoduch√© maz√°n√≠ vlastn√≠ch z√°znam≈Ø
st.subheader("üóëÔ∏è Smazat z√°znam")
to_delete = st.text_input("Zadej ID polo≈æky ke smaz√°n√≠ (uuid)")
if st.button("Smazat"):
    if to_delete:
        delres = supabase.from_("items").delete().eq("id", to_delete).execute()
        if delres.error:
            st.error(f"Delete error: {delres.error}")
        else:
            st.success("Smaz√°no, pokud z√°znam pat≈ôil tobƒõ.")
            st.rerun()
